                    ==================================
                    =                                =
                    =  S2A API CLIENT Documentation  =
                    =                                =
                    ==================================

                     Ship2Anywhere API client library


=======================
I N S T A L L A T I O N
=======================

There is several ways to download and install the S2A API Client.
The S2A API Client resides on github.com at
https://github.com/ship2anywhere/s2a-api-client

--------------------------
1. Links to the repository
--------------------------

https://github.com/ship2anywhere/s2a-api-client.git
git@github.com:ship2anywhere/s2a-api-client.git
git://github.com/ship2anywhere/s2a-api-client.git

----------------------
2. Direct Installation
----------------------

pip install git+https://github.com/ship2anywhere/s2a-api-client.git

--------------------
3. Clone and install
--------------------

git clone https://github.com/ship2anywhere/s2a-api-client.git
cd s2a-api-client
python setup.py install


===============
S E R V I C E S
===============

Service modules are located at s2a_api_client/ directory

----------------
1. Quote Service
----------------
    The 'Get quote' service allows for obtaining shipping quotes from
    carriers integrated with Ship2Anywhere.
    
    Example: 
    
    # import s2a api client
    from s2a_api_client  import quote
    
    # create object
    api_url = "https://api.s2asandbox.com/v1.0/"
    quote_service = quote.QuoteService(api_url)
    
    # get quote
    request = {} # add python structure for Quote Service 
    # method returns dictionary compilant with JSON structure for Quote Response
    r = quote_service.get_quote(request)

----------------
2. Order Service
----------------

    ~~~~~~~~~~~~~~~
    a. Create order
    ~~~~~~~~~~~~~~~
    The 'Create order' service initializes the booking process.
    
    Example: 
    
    # import s2a api client
    from s2a_api_client import order

    # create object
    api_url = "https://api.s2asandbox.com/v1.0/"
    order_service = order.OrderService(api_url)
    
    # create order
    request = {} # add python structure for Create Order Service
    token = "60af2c6d5755aa9cd089cf100a272cc4f747f1e8" # token from OAuth2.0 service
    # method returns dictionary compilant with JSON structure for Order Response
    r = order_service.create_order(request, token)
    
    ~~~~~~~~~~~~~~~
    b. Accept order
    ~~~~~~~~~~~~~~~
    After creating an order the client can either accept or cancel it. When the order
    has been accepted (payment information provided), the booking process begins.
    
    Example:
    
    # import s2a api client
    from s2a_api_client import order

    # create object
    api_url = "https://api.s2asandbox.com/v1.0/"
    order_service = order.OrderService(api_url)
    
    # accept order
    request = {} # add python structure for Create Order Service
    order_id = "S2AO000001" # S2A Order ID
    token = "60af2c6d5755aa9cd089cf100a272cc4f747f1e8" # token from OAuth2.0 service
    # method returns dictionary compilant with JSON structure for Order Response
    r = order_service.accept_order(request, order_id, token)

    ~~~~~~~~~~~~~~~
    c. Cancel order
    ~~~~~~~~~~~~~~~
    Cancel created order.
    
    Example: 
    
    # import s2a api client
    from s2a_api_client import order

    # create object
    api_url = "https://api.s2asandbox.com/v1.0/"
    order_service = order.OrderService(api_url)
    
    # accept order
    order_id = "S2AO000001" # S2A Order ID
    token = "60af2c6d5755aa9cd089cf100a272cc4f747f1e8" # token from OAuth2.0 service
    # method returns dictionary compilant with JSON structure for Order Response
    r = order_service.cancel_order(order_id, token)

    ~~~~~~~~~~~~~~
    d. Fetch order
    ~~~~~~~~~~~~~~
    The 'Fetch order' service allows for monitoring booking with the polling
    technique
    
    Example: 
    
    # import s2a api client
    from s2a_api_client import order

    # create object
    api_url = "https://api.s2asandbox.com/v1.0/"
    order_service = order.OrderService(api_url)
    
    # accept order
    order_id = "S2AO000001" # S2A Order ID
    token = "60af2c6d5755aa9cd089cf100a272cc4f747f1e8" # token from OAuth2.0 service
    # method returns dictionary compilant with JSON structure for Order Response
    r = order_service.fetch_order(order_id, token)
    
--------------------
3. Documents Service
--------------------

    The 'Documentation" service allows downloading shipping documents which includes 
    shipping labels

    Example: 
    
    # import s2a api client
    from s2a_api_client import doc

    # create object
    api_url = "https://api.s2asandbox.com/v1.0/"
    document_service = doc.DocumentService(api_url)
    
    # accept order
    order_id = "S2AO000001" # S2A Order ID
    token = "60af2c6d5755aa9cd089cf100a272cc4f747f1e8" # token from OAuth2.0 service
    # method returns dictionary compilant with JSON structure for Documents Response
    r = document_service.download_documents(order_id, token)

-------------------
4. Tracking Service
-------------------

    Tracking allows for obtaining information concerning the state of the shipment
    
    Example: 
    
    # import s2a api client
    from s2a_api_client import track

    # create object
    api_url = "https://api.s2asandbox.com/v1.0/"
    track_service = track.TrackService(api_url)
    
    # track order
    tracking_number = "ABC123" # Tracking Number
    # method returns dictionary compilant with JSON structure for Tracking Response
    r = track_service.track(tracking_number)

---------------
5. S2aApi Class
---------------
    If you want to access whole set of services, you could use S2aApi class,
    which includes all of the services.
    
    Example:
    
    # import s2a api client
    from s2a_api_client import S2aApi
    
    # create object
    api_url = "https://api.s2asandbox.com/v1.0/"
    s2a_api = S2aApi(api_url)
    
    # get services
    s2a_api.quote_service.get_quote(...)
    s2a_api.order_service.create_order(...)
    s2a_api.order_service.accept_order(...)
    s2a_api.order_service.cancel_order(...)
    s2a_api.order_service.fetch_order(...)
    s2a_api.doc_service.download_documents(...)
    s2a_api.track_service.track(...)

-------------------------
6. Authentication Service
-------------------------
    The 'Authentitcaiotn Service' allows to generate token from a 'code'.
    
    Example:
    
    # import s2a api client
    from s2a_api_client import auth

    # create object
    api_url = "https://api.s2asandbox.com/oauth2/"
    client_id = "123456789"
    client_secret = "abc123abc123"
    auth_service = auth.AuthService(api_url, client_id, client_secret)
        
    # get token
    code = "qwerty12345"
    # method returns dictionary compilant with JSON structure for Auth Response
    r = auth_service.get_token(code)


=================
E X E P T I O N S
=================

Each exception contains error message and HTTP Response Code, except of
S2aApiException, which contains only error message and is base class for other
exceptions.

------------------
1. S2aApiException
------------------
    Exception is raised if there is an error without HTTP part of functionality.
    This is base exception class which is extended by S2aApiHttpException.

----------------------
2. S2aApiHttpException
----------------------
    Exception is raised if there is an error with HTTP status code which is 
    not supported by S2A API. This class introduces http response code to exception,
    it is extended by following exception classes.

------------------
3. ServerException
------------------
    Exception is raised if there is an error with HTTP status code
    equal to 500 - Internal Server Error

-------------------
4. RequestException
-------------------
    Exception is raised if there is an error with HTTP status code
    equal to 400 - Bad Request or 405 -Method Not Allowed

------------------
5. AccessException
------------------
    Exception is raised if there is an error with HTTP status code
    equal to 403 - Forbidden

--------------------
6. NotFoundException
--------------------
    Exception is raised if there is an error with HTTP status code
    equal to 404 - Not Found

------------------------
7. ServiceLogicException
------------------------
    Exception is raised if there is an error with HTTP status code
    equal to 412 - Precondition Failed


=============
S C R I P T S
=============

Testing script is provided at the 'scripts/' directory. After installation, scripts
are added to the PATH variable, so it can be executed from anywhere.
Sample JSON files are provided in 'samples/' directory.

-------------------
1. Get Quote Script
-------------------

    Usage: s2a-quote-get.py [-h] --api_url API_URL --json_file JSON_FILE [--log LOG]

    Example:

    s2a-quote.get.py --api_url https://api.s2asandbox.com/v1.0/ --json_file
        samples/sample_quote_get.json


----------------------
2. Create Order Script
----------------------

    Usage: s2a-order-create.py [-h] --api_url API_URL --token TOKEN --json_file
                               JSON_FILE [--log LOG]

    Example:

    s2a-order-create.py --api_url https://api.s2asandbox.com/v1.0/ --token 1234567890
        --json_file samples/sample_order_create.json


----------------------
3. Accept Order Script
----------------------

    Usage: s2a-order-accept.py [-h] --api_url API_URL --order_id ORDER_ID --token
                               TOKEN --json_file JSON_FILE [--log LOG]

    Example:

    s2a-order-accept.py --api_url https://api.s2asandbox.com/v1.0/ --token 1234567890
        --order_id S2AO000001 --json_file samples/sample_order_accept.json


----------------------
4. Cancel Order Script
----------------------


    Usage: s2a-order-cancel.py [-h] --api_url API_URL --token TOKEN --order_id
                               ORDER_ID [--log LOG]

    Example:

    s2a-order-cancel.py --api_url https://api.s2asandbox.com/v1.0/ --token 1234567890
        --order_id S2AO000001
   

----------------------
5. Fetch Order Script
----------------------

    Usage: s2a-order-fetch.py [-h] --api_url API_URL --token TOKEN --order_id
                              ORDER_ID [--log LOG]

    Example:

    s2a-order-fetch.py --api_url https://api.s2asandbox.com/v1.0/ --token 1234567890
        --order_id S2AO000001


----------------------------
6. Download Documents Script
----------------------------

    Usage: s2a-documents-get.py [-h] --api_url API_URL --token TOKEN --order_id
                                ORDER_ID [--log LOG]

    Example:

    s2a-documents-get.py --api_url https://api.s2asandbox.com/v1.0/
        --token 1234567890--order_id S2AO000001


---------------
7. Track Script
---------------

    Usage: s2a-track.py [-h] --api_url API_URL --tracking_number TRACKING_NUMBER
                        [--log LOG]

    Example:

    s2a-track.py --api_url https://api.s2asandbox.com/v1.0/ --tracking_number ABC123


------------------------
8. Authentication Script
------------------------

    Usage: s2a-track.py [-h] --api_url API_URL --tracking_number TRACKING_NUMBER
                        [--log LOG]

    Example:

    s2a-auth-get-token.py --api_url https://api.s2asandbox.com/oauth2/
        --client_id 123456789 --client_secret abc123abc123 --code qwerty12345


===================
R E F E R E N C E S
===================

1. S2A API Documentation:
   https://www.ship2anywhere.com.au/developers/api-functionality/
